- hosts: "{{ target }}"
  become: yes

  tasks:
    - name: Remove unneeded packages
      ansible.builtin.apt:
        name:
          - snapd
          - landscape-common
        state: absent
        autoremove: yes

    - name: Update installed packages
      ansible.builtin.apt:
        upgrade: safe
        update_cache: yes

    - name: Create /etc/docker directory
      ansible.builtin.file:
        path: /etc/docker
        state: directory

    - name: Copy docker daemon configuration
      ansible.builtin.copy:
        src: files/daemon.json
        dest: /etc/docker/daemon.json

    - name: Install honeypot service
      ansible.builtin.copy:
        src: files/honeypot.service
        dest: /etc/systemd/system/honeypot.service

    - name: Stop honeypot service
      ansible.builtin.systemd:
        name: honeypot
        daemon_reload: yes
        state: stopped

    - name: Install dependencies
      ansible.builtin.apt:
        name:
          - docker.io
          - openssl
          - rsync
          - sudo

    - name: Remove python3.8 installation directory
      ansible.builtin.file:
        dest: /opt/python3
        state: absent

    - name: Download python3.8
      get_url:
        url: https://github.com/supriyo-biswas/python-builds/releases/download/3.8.8/python-3.8.8-linux-x86_64.tar.bz2
        dest: /tmp/python-3.8.8-linux-x86_64.tar.bz2

    - name: Create python3.8 installation directory
      ansible.builtin.file:
        dest: /opt/python3
        state: directory

    - name: Install python3.8
      unarchive:
        src: /tmp/python-3.8.8-linux-x86_64.tar.bz2
        dest: /opt/python3
        remote_src: yes

    - name: Remove python3.8 installation directory
      ansible.builtin.file:
        dest: /tmp/python-3.8.8-linux-x86_64.tar.bz2
        state: absent

    - name: Set timezone to UTC
      community.general.timezone:
        name: Etc/UTC
      register: timezone

    - name: Enable memory cgroup in grub config
      ansible.builtin.replace:
        path: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX)="(?!.*cgroup_enable=)(.*)"'
        replace: '\1="cgroup_enable=memory swapaccount=1 \2"'
      register: grub_config

    - name: Run update-grub
      ansible.builtin.command: update-grub
      when: grub_config.changed

    - name: Reboot for cgroup/timezone changes
      ansible.builtin.reboot: {}
      when: grub_config.changed or timezone.diff.after != timezone.diff.before

    - name: Pull alpine docker image
      ansible.builtin.command: docker pull alpine:latest

    - name: Copy iptables-persistent command
      ansible.builtin.copy:
        src: files/iptables-persistent
        dest: /usr/local/bin/iptables-persistent
        mode: u=rwx,g=rx,o=rx

    - name: Copy iptables-persistent service file
      ansible.builtin.copy:
        src: files/iptables-persistent.service
        dest: /etc/systemd/system/iptables-persistent.service
        mode: u=rwx,g=rx,o=rx

    - name: Enable iptables-persistent service
      ansible.builtin.systemd:
        name: iptables-persistent
        daemon_reload: yes
        enabled: yes

    - name: Start iptables-persistent service
      ansible.builtin.systemd:
        name: iptables-persistent
        state: started

    - name: Create honeypot user
      ansible.builtin.user:
        name: honeypot
        home: /opt/honeypot
        shell: /bin/false
        create_home: yes
        system: yes

    - name: Add honeypot user to docker group
      ansible.builtin.user:
        name: honeypot
        append: yes
        groups:
          - honeypot
          - docker

    - name: Copy html directory
      ansible.builtin.synchronize:
        src: files/html
        dest: /opt/honeypot/data
        recursive: yes
        delete: yes

    - name: Create settings file
      ansible.builtin.template:
        src: files/dotenv.j2
        dest: /opt/honeypot/data/html/.env

    - name: Create logs directory
      ansible.builtin.file:
        dest: /opt/honeypot/data/logs
        state: directory
        owner: honeypot
        group: honeypot
        mode: u=rwX,g=rX,o=rX

    - name: Create SSH keys directory
      ansible.builtin.file:
        dest: /opt/honeypot/data/ssh
        state: directory

    - name: Create RSA SSH key
      ansible.builtin.shell: ssh-keygen -t rsa -f /opt/honeypot/data/ssh/host_rsa -N ''
      args:
        creates: /opt/honeypot/data/ssh/host_rsa

    - name: Create ECDSA SSH key
      ansible.builtin.shell: ssh-keygen -t ecdsa -f /opt/honeypot/data/ssh/host_ecdsa -N ''
      args:
        creates: /opt/honeypot/data/ssh/host_ecdsa

    - name: Create Ed25519 SSH key
      ansible.builtin.shell: ssh-keygen -t ed25519 -f /opt/honeypot/data/ssh/host_ed25519 -N ''
      args:
        creates: /opt/honeypot/data/ssh/host_ed25519

    - name: Set permissions on SSH key files
      ansible.builtin.file:
        path: /opt/honeypot/data/ssh
        owner: honeypot
        group: honeypot
        mode: u=rwX,g=,o=
        recurse: yes

    - name: Stop routing requests to honeypot
      ansible.builtin.iptables:
        state: absent
        action: insert
        table: nat
        chain: PREROUTING
        protocol: tcp
        jump: DNAT
        destination_port: "!{{ ansible_port }}"
        to_destination: ":3000"

    - name: Create certificate directory
      ansible.builtin.file:
        dest: /opt/honeypot/data/certs
        state: directory

    - name: Check if the certificate exists
      stat:
        path: /opt/honeypot/data/certs/cert.pem
      register: cert_file

    - name: Find the notafter of the certificate
      ansible.builtin.shell: >-
        date +%s --date "$(
          openssl x509 -enddate -noout -in /opt/honeypot/data/certs/cert.pem |
          cut -d= -f2
        )"
      when: cert_file.stat.exists
      register: cert_expire

    - name: Check if we should generate certificate
      set_fact:
        should_create_cert: >-
          {{ not cert_file.stat.exists or
          (cert_expire.stdout | trim | int) - ansible_date_time.epoch | int <= 32 * 86400 }}

    - name: Check if certbot is to be used
      set_fact:
        use_letsencrypt: "{{ letsencrypt_email_address is defined }}"

    - name: Install certbot
      ansible.builtin.apt:
        name:
          - certbot
      when: use_letsencrypt and should_create_cert

    - name: Obtain certificates from certbot
      ansible.builtin.command: >-
        certbot certonly --standalone --non-interactive --agree-tos
        --email {{ letsencrypt_email_address }}
        --domain {{ ansible_host }}
      args:
        creates: /etc/letsencrypt/live/{{ ansible_host }}/fullchain.pem
      when: use_letsencrypt and should_create_cert

    - name: Copy certbot generated certificate
      ansible.builtin.copy:
        src: /etc/letsencrypt/live/{{ ansible_host }}/fullchain.pem
        dest: /opt/honeypot/data/certs/cert.pem
        remote_src: yes
      when: use_letsencrypt and should_create_cert

    - name: Copy certbot generated private key
      ansible.builtin.copy:
        src: /etc/letsencrypt/live/{{ ansible_host }}/privkey.pem
        dest: /opt/honeypot/data/certs/key.pem
        remote_src: yes
      when: use_letsencrypt and should_create_cert

    - name: Copy certificate renewal script
      ansible.builtin.copy:
        src: files/renew-honeypot-certs.sh
        dest: /opt/honeypot/renew-honeypot-certs.sh
        mode: u=rwx,g=rx,o=rx
      when: use_letsencrypt

    - name: Create a cronjob for certificate renewal using letsencrypt
      ansible.builtin.cron:
        name: honeypot renew certs
        minute: '48'
        hour: '09'
        job: /opt/honeypot/renew-honeypot-certs.sh
      become: true
      when: use_letsencrypt

    - name: Remove generated private key if it is expiring
      ansible.builtin.file:
        path: /opt/honeypot/data/certs/key.pem
        state: absent
      when: should_create_cert and not use_letsencrypt

    - name: Remove generated certificate if it is expiring
      ansible.builtin.file:
        path: /opt/honeypot/data/certs/cert.pem
        state: absent
      when: should_create_cert and not use_letsencrypt

    - name: Generate certificates using OpenSSL
      ansible.builtin.command: >-
        openssl req -x509 -newkey rsa:2048 -days 365 -nodes
        -subj '/CN={{ ansible_host }}'
        -keyout /opt/honeypot/data/certs/key.pem
        -out /opt/honeypot/data/certs/cert.pem
      args:
        creates: /opt/honeypot/data/certs/cert.pem
      when: should_create_cert and not use_letsencrypt

    - name: Set permissions on certificates
      ansible.builtin.file:
        path: /opt/honeypot/data/certs
        owner: honeypot
        group: honeypot
        mode: u=rwX,g=,o=
        recurse: yes

    - name: Create source directory
      ansible.builtin.file:
        dest: /opt/honeypot/src
        state: directory

    - name: Copy source files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /opt/honeypot/src
      with_fileglob:
        - ../../src/*.py

    - name: Copy requirements.txt
      ansible.builtin.copy:
        src: ../../requirements.txt
        dest: /opt/honeypot/requirements.txt
      register: requirements

    - name: Remove old virtualenv
      ansible.builtin.file:
        path: /opt/honeypot/venv
        state: absent

    - name: Create new virtualenv
      ansible.builtin.command: /opt/python3/bin/python3 -mvenv /opt/honeypot/venv

    - name: Install python dependencies
      ansible.builtin.command: /opt/honeypot/venv/bin/pip install -r /opt/honeypot/requirements.txt

    - name: Copy honeypot configuration
      ansible.builtin.copy:
        src: files/config.json
        dest: /opt/honeypot/data/config.json

    - name: Enable honeypot service
      ansible.builtin.systemd:
        name: honeypot
        daemon_reload: yes
        enabled: yes

    - name: Start honeypot service
      ansible.builtin.systemd:
        name: honeypot
        state: started

    - name: Route requests to honeypot
      ansible.builtin.iptables:
        state: present
        action: insert
        table: nat
        chain: PREROUTING
        protocol: tcp
        jump: DNAT
        destination_port: "!{{ ansible_port }}"
        to_destination: ":3000"
